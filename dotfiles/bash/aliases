# TIPS
# ----
# !79                  > rerun the command 79 in the history
# !echo                > rerun the last command with 'echo' in the history
# ^r ^g                > do a reverse search, then cancel
# mv README{.txt,.doc} > change extension without retyping the name

# SHELL
# -----
alias  l='ls -la'
alias  h='history' 
alias md='mkdir -p'
alias cx='chmod +x'
alias rf='rm -rf'
alias dh='du -hd 0' # current folder size

# DOTFILES
# --------
alias sb='source ~/.bashrc'
alias reload='source ~/bin/dotfiles/bash/aliases'
alias ea='mate -w ~/bin/dotfiles/bash/aliases && reload'
alias ee="mate ~/bin/dotfiles/bash/env"

# GIT
# ---
alias  gs='git status'
alias  gd='git diff'
alias gdh='git diff HEAD HEAD~'
alias  ga='git add'
alias  gl='git log'
alias glf='git log --pretty=full'
alias glm='git log --pretty=full --author `git config user.name`'
alias  gh='git log --pretty=format:"%h %ad | %s%d [%an]" --graph --date=short --all'
alias ghm='git log --pretty=format:"%h %ad | %s%d [%an]" --graph --date=short'
alias  gu='git pull'
alias  gm='git mv'
alias gcl='git clone'
alias gli='git update-index --assume-unchanged' # locally ignore changes
alias glu='git update-index --no-assume-unchanged' # stop ignoring changes
alias  gc='git commit'
alias  go='git checkout'
alias gcp='git cherry-pick'
alias  gb='git branch'
alias gbr='git branch -r'
alias gmm='git merge master'
alias  gp='git push'
alias  gt='git stash'
alias gta='git stash apply'
alias gam='git commit --amend' # include new changes in the last commit
alias grh='git reset HEAD'
alias grhh='git reset --hard HEAD'
alias  gbn="git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'" # current branch name
function grd() { # git restore deleted file
  git checkout $(git rev-list -n 1 HEAD -- "$1")^ -- "$1"
}
function gbt() { # git checkout and track remote branch
  git checkout -t -b $1 origin/$1
}
function gsu() { # git track the remote branch with the same name as the current
  git branch --set-upstream $(gbn) origin/$(gbn)  
}
function gg() { # git commit that reads the message from the same line
  git add . 
  git commit -v -a -m "$*"
}
function gbump() { # bumps a gem, commits and create a tag
  rake version:bump:patch
  git tag -a v`cat VERSION` -m'`git log HEAD^^..HEAD^ --format=%s`'
  git push
  git push --tags
}

alias ungit="find . -name '.git' -exec rm -rf {} \;"

# RAKE
# ----
alias rdc='rake db:create'
alias rdm='rake db:migrate'
alias rds='rake db:setup'
alias rdr='rake db:rollback'
alias  rr='rake routes'

# RAILS
# -----
alias  r='rails'
function rv { # Rails 2 and 3 server
  if [ -f script/rails ]; then
    script/rails server $*;
  else
    script/server $*;
  fi
}
function get_bg {
  osascript -e "tell application \"Terminal\" to get current settings of first window"
}

function set_bg {
  osascript -e "tell application \"Terminal\" to set background color of first window to $1"
}

function unset_bg {
  osascript -e "tell application \"Terminal\" to set current settings of first window to $*"
}

function rc { # custom Rails console
  term_settings=$(get_bg) # store previous color
  case $1 in # change color based on environment
    stage|staging) set_bg "{0, 6000, 3000}" ;;
    prod|production) set_bg "{6000, 3000, 0}" ;;
    *) set_bg "{3000, 3000, 6000}" ;;
  esac
  if which pry >/dev/null; then # use pry if installed
    if test -z "$1"; then # if environment is present, prefix it
      pry # pry automatically load Rails -- check .pryrc
    else
      RAILS_ENV=$1 pry
    fi
  else
    rails console $*
  fi
  unset_bg $term_settings # restore previous color
}
alias  rg='rails generate'
alias rgs='rails generate scaffold'
alias rgm='rails generate migration'
function rn {
  cd ~/code;
  rails new $* --skip-gemfile --skip-prototype --database=mysql;
  cd $1;
  cp ../Gemfile .;
  bundle;
}

# BUNDLER
# -------
alias be='bundle exec'
alias bi='bundle install'
alias bu='bundle update'

# RBENV
# -----
function gi {
  gem install $*; 
  rbenv rehash;
}

# SVN
# ---
alias unsvn="find . -name '.svn' -exec rm -rf {} \;"

# CUSTOM DROPBOX
# --------------
PPFILE='__drop__.zip'
PPTO='gollum'

function push {
  rm -f $PPFILE
  zip -r $PPFILE $*
  scp $PPFILE $PPTO:
  rm -f $PPFILE
}

function pull {
  rm -f $PPFILE
  scp $PPTO:$PPFILE .
  ssh $PPTO rm -f $PPFILE
  unzip $PPFILE
  rm -f $PPFILE
}

# TEXTMATE
# --------
alias  m='mate .'
alias hosts='mate /etc/hosts'
# TOP
# ---
alias tc='top -o cpu'
alias tv='top -o vsize'

# ZIP
# ---
function zipr() {
  zip -r $1.zip $1
}

# GOOD
# ----

alias   c='cd ~/code; cd'
alias cdr='cd ~/code/good.rb'
alias cdi='cd ~/code/good.is'
alias cdg='cd ~/code/gems'
alias cdm='cd ~/code/maker'

function updatedb() { # e.g. updatedb www
  echo 'Downloading...'
  scp monitor:/ebs/backup/$1/$1-$(date -v -1d +"%Y-%m-%d")-03.sql.gz /tmp/www.sql.gz
  echo 'Uncompressing...'
  gunzip /tmp/www.sql.gz
  echo 'Importing...'
  mysql -u root good < /tmp/www.sql
  echo 'Done!'
}
